"""
Distributed under the MIT License. See LICENSE.txt for more info.
"""

# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-06-05 08:14
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('title', models.CharField(blank=True, choices=[('', ''), ('Mr', 'Mr'), ('Ms', 'Ms'), ('Mrs', 'Mrs'), ('Dr', 'Dr'), ('Prof', 'Prof'), ('A/Prof', 'A/Prof')], default='', max_length=10)),
                ('gender', models.CharField(blank=True, choices=[('', ''), ('Female', 'Female'), ('Male', 'Male')], default='', max_length=20)),
                ('is_student', models.BooleanField(default=False)),
                ('institution', models.CharField(max_length=100)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('scientific_interests', models.TextField(blank=True, null=True, verbose_name='Scientific Interests')),
                ('status', models.CharField(choices=[('Unverified', 'Unverified'), ('Verified', 'Verified'), ('Confirmed', 'Confirmed'), ('Deleted', 'Deleted')], default='Unverified', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Galaxy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first', models.TextField()),
                ('sdss', models.TextField(blank=True, null=True)),
                ('ra', models.TextField()),
                ('dec', models.TextField()),
                ('fint', models.FloatField()),
                ('fpeak', models.FloatField()),
                ('rms', models.FloatField()),
                ('maj', models.FloatField()),
                ('min', models.FloatField()),
                ('pa', models.FloatField()),
                ('index', models.IntegerField()),
                ('my_label', models.TextField(blank=True, null=True)),
                ('nn2', models.IntegerField()),
                ('nn2_first', models.TextField(blank=True, null=True)),
                ('nn2_angle', models.FloatField()),
                ('nn2_fint', models.FloatField()),
                ('nn2_fpeak', models.FloatField()),
                ('nn2_rms', models.FloatField()),
                ('nn2_maj', models.FloatField()),
                ('nn2_min', models.FloatField()),
                ('nn3', models.IntegerField()),
                ('nn3_first', models.TextField(blank=True, null=True)),
                ('nn3_angle', models.FloatField()),
                ('nn3_fint', models.FloatField()),
                ('nn3_fpeak', models.FloatField()),
                ('nn3_rms', models.FloatField()),
                ('nn3_maj', models.FloatField()),
                ('nn3_min', models.FloatField()),
                ('nn4', models.IntegerField()),
                ('nn4_first', models.TextField(blank=True, null=True)),
                ('nn4_angle', models.FloatField()),
                ('nn4_fint', models.FloatField()),
                ('nn4_fpeak', models.FloatField()),
                ('nn4_rms', models.FloatField()),
                ('nn4_maj', models.FloatField()),
                ('nn4_min', models.FloatField()),
                ('nn5', models.IntegerField()),
                ('nn5_first', models.TextField(blank=True, null=True)),
                ('nn5_angle', models.FloatField()),
                ('nn5_fint', models.FloatField()),
                ('nn5_fpeak', models.FloatField()),
                ('nn5_rms', models.FloatField()),
                ('nn5_maj', models.FloatField()),
                ('nn5_min', models.FloatField()),
                ('nn6', models.IntegerField()),
                ('nn6_first', models.TextField(blank=True, null=True)),
                ('nn6_angle', models.FloatField()),
                ('nn6_fint', models.FloatField()),
                ('nn6_fpeak', models.FloatField()),
                ('nn6_rms', models.FloatField()),
                ('nn6_maj', models.FloatField()),
                ('nn6_min', models.FloatField()),
                ('nn7', models.IntegerField()),
                ('nn7_first', models.TextField(blank=True, null=True)),
                ('nn7_angle', models.FloatField()),
                ('nn7_fint', models.FloatField()),
                ('nn7_fpeak', models.FloatField()),
                ('nn7_rms', models.FloatField()),
                ('nn7_maj', models.FloatField()),
                ('nn7_min', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='ImageStore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('database_type', models.CharField(choices=[('TGSS', 'TGSS'), ('First', 'First')], max_length=10)),
                ('image', models.ImageField(blank=True, null=True, upload_to='database_images', verbose_name='Image')),
                ('actual_url', models.TextField()),
                ('galaxy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='alert_web.Galaxy')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('category', models.CharField(blank=True, choices=[('radio', 'radio'), ('select', 'select'), ('text', 'text'), ('number', 'number')], default=None, max_length=10, null=True)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionDrawnResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x_coordinates', models.TextField()),
                ('y_coordinates', models.TextField()),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='alert_web.ImageStore')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(max_length=100, unique=True)),
                ('option_label', models.CharField(max_length=10, unique=True)),
                ('is_default_option', models.BooleanField(default=False)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='alert_web.Question')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Finished', 'Finished'), ('Processed', 'Processed')], default='Active', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='SurveyElement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('galaxy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='alert_web.Galaxy')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='alert_web.Question')),
            ],
        ),
        migrations.CreateModel(
            name='SurveyQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='alert_web.Survey')),
                ('survey_element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='alert_web.SurveyElement')),
            ],
        ),
        migrations.CreateModel(
            name='Verification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('information', models.CharField(max_length=1024)),
                ('expiry', models.DateTimeField(null=True)),
                ('verified', models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name='response',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='alert_web.Survey'),
        ),
        migrations.AddField(
            model_name='response',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='questionresponse',
            name='response',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='alert_web.Response'),
        ),
        migrations.AddField(
            model_name='questionresponse',
            name='survey_question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='alert_web.SurveyQuestion'),
        ),
        migrations.AddField(
            model_name='questiondrawnresponse',
            name='response',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='alert_web.Response'),
        ),
        migrations.AddField(
            model_name='questiondrawnresponse',
            name='survey_question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='alert_web.SurveyQuestion'),
        ),
        migrations.AlterUniqueTogether(
            name='surveyelement',
            unique_together=set([('question', 'galaxy')]),
        ),
        migrations.AlterUniqueTogether(
            name='response',
            unique_together=set([('user', 'survey')]),
        ),
        migrations.AlterUniqueTogether(
            name='questionresponse',
            unique_together=set([('response', 'survey_question')]),
        ),
        migrations.AlterUniqueTogether(
            name='questiondrawnresponse',
            unique_together=set([('response', 'survey_question', 'image')]),
        ),
        migrations.AlterUniqueTogether(
            name='imagestore',
            unique_together=set([('galaxy', 'database_type')]),
        ),
    ]
